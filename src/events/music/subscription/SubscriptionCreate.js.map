{"debug_id":"4372345b-3e21-57b4-b3ca-40e99735b258","file":"SubscriptionCreate.js","mappings":";AAAA,OAAO,EAAE,KAAK,EAAkC,MAAM,EAAgB,YAAY,EAAE,MAAM,sBAAsB,CAAC;AACjH,OAAO,EAAE,MAAM,IAAI,aAAa,EAAE,MAAM,YAAY,CAAC;AACrD,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAErD,MAAM,OAAO,kBAAmB,SAAQ,KAAK;IACzC,YAAY,MAAc,EAAE,SAAoB;QAC5C,KAAK,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,CAAC,kBAAkB,CAAC,CAAC;IACxD,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,YAA0B;QACpC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CACnB,4BAA4B,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,YAAY,CAAC,KAAK,CAAC,EAAE,YAAY,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,EACjH,YAAY,CACf,CAAC;QAEF,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC;YAClC,KAAK,EAAE;gBACH,OAAO,EAAE,YAAY,CAAC,KAAK,CAAC,EAAE;aACjC;YACD,MAAM,EAAE;gBACJ,QAAQ,EAAE,YAAY,CAAC,QAAQ;gBAC/B,MAAM,EAAE,IAAI;aACf;YACD,MAAM,EAAE;gBACJ,OAAO,EAAE,YAAY,CAAC,KAAK,CAAC,EAAE;gBAC9B,OAAO,EAAE,YAAY,CAAC,YAAY,CAAC,EAAE;gBACrC,MAAM,EAAE,YAAY,CAAC,WAAW,CAAC,EAAE;gBACnC,MAAM,EAAE,IAAI;aACf;SACJ,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,yDAAyD,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,YAAY,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC;QAErJ,UAAU,CAAC,KAAK,IAAI,EAAE;YAClB,IAAI,CAAC,YAAY,CAAC,SAAS,IAAI,CAAC,YAAY,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,EAAE;gBAC/E,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;gBACpH,YAAY,CAAC,OAAO,EAAE,CAAC;aAC1B;QACL,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;IAClD,CAAC;CACJ","names":[],"sourceRoot":"/","sources":["src/events/music/subscription/SubscriptionCreate.ts"],"sourcesContent":["import { Event, KATClient as Client, Commander, Events, Subscription, MusicPrompts } from '@structures/index.js';\nimport { Events as DiscordEvents } from 'discord.js';\nimport { ActionEmbed } from '@utils/embeds/index.js';\n\nexport class SubscriptionCreate extends Event {\n    constructor(client: Client, commander: Commander) {\n        super(client, commander, Events.SubscriptionCreate);\n    }\n\n    async execute(subscription: Subscription) {\n        this.client.logger.info(\n            `Subscription Created for ${subscription.guild.name} (${subscription.guild.id}). Node: ${subscription.node.name}`,\n            'Dispatcher'\n        );\n\n        await this.client.prisma.queue.upsert({\n            where: {\n                guildId: subscription.guild.id,\n            },\n            update: {\n                position: subscription.position,\n                active: true,\n            },\n            create: {\n                guildId: subscription.guild.id,\n                voiceId: subscription.voiceChannel.id,\n                textId: subscription.textChannel.id,\n                active: true,\n            },\n        });\n\n        this.client.emit(DiscordEvents.Debug, `DATABASE >> Activated Queue And Updated Position For: ${subscription.guild.name} (${subscription.guild.id})`);\n\n        setTimeout(async () => {\n            if (!subscription.destroyed && !subscription.active && !subscription.queue.length) {\n                subscription.textChannel.send({ embeds: [new ActionEmbed('warn').setText(MusicPrompts.Inactive)] }).catch(() => {});\n                subscription.destroy();\n            }\n        }, this.client.config.music.inactiveDuration);\n    }\n}\n"],"version":3}