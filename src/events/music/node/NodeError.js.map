{"debug_id":"4b37c2f0-3860-5f3c-907d-24dbbbd959d2","file":"NodeError.js","mappings":";AAAA,OAAO,EAAE,KAAK,EAAkC,MAAM,sBAAsB,CAAC;AAC7E,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAC;AACpC,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAErD,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,MAAM,OAAO,SAAU,SAAQ,KAAK;IAChC,YAAY,MAAc,EAAE,SAAoB;QAC5C,KAAK,CAAC,MAAM,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;QAEtC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE;YACnC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,4CAA4C,CAAC,CAAC;IACjF,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,IAAY,EAAE,KAAY;QACpC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAkB,IAAI,oBAAoB,CAAC,CAAC,CAAC;QACrE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAErB,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;QACpE,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE;YACtC,IAAI,IAAI,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI;gBAAE,YAAY,CAAC,OAAO,EAAE,CAAC;YAC3D,YAAY,CAAC,WAAW;iBACnB,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,6DAA6D,CAAC,CAAC,EAAE,CAAC;iBAClH,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;SACxB;IACL,CAAC;CACJ","names":[],"sourceRoot":"/","sources":["src/events/music/node/NodeError.ts"],"sourcesContent":["import { Event, KATClient as Client, Commander } from '@structures/index.js';\nimport { Events } from 'discord.js';\nimport { ActionEmbed } from '@utils/embeds/index.js';\n\nimport chalk from 'chalk';\n\nexport class NodeError extends Event {\n    constructor(client: Client, commander: Commander) {\n        super(client, commander, 'nodeError');\n\n        this.client.once(this.name, (_, err) => {\n            this.client.logger.error(err);\n        });\n        \n        this.client.emit(Events.Debug, 'Events (NodeError) >> Registered Sub Event');\n    }\n\n    async execute(name: string, error: Error) {\n        console.error(chalk.red(`Music >> Node: ${name} Has Had An Error!`));\n        console.error(error);\n\n        const subscriptions = this.client.dispatcher.subscriptions.values();\n        for (const subscription of subscriptions) {\n            if (name == subscription.node.name) subscription.destroy();\n            subscription.textChannel\n                .send({ embeds: [new ActionEmbed('fail').setText('The voice node has disconnected. Try playing another track!')] })\n                .catch(() => {});\n        }\n    }\n}\n"],"version":3}