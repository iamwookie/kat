{"debug_id":"dfe625a4-3e00-554e-8234-1cb45209cab4","file":"Server.js","mappings":";AACA,OAAO,OAAoB,MAAM,SAAS,CAAC;AAC3C,OAAO,MAAM,MAAM,cAAc,CAAC;AAClC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,UAAU,MAAM,aAAa,CAAC;AACrC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,IAAI,EAAE,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AACrC,OAAO,EAAE,aAAa,EAAE,MAAM,KAAK,CAAC;AACpC,OAAO,EAAE,MAAM,IAAI,CAAC;AAEpB,uCAAuC;AACvC,OAAO,WAAW,MAAM,sBAAsB,CAAC;AAC/C,uCAAuC;AAEvC,MAAM,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AAE1D,MAAM,OAAO,MAAM;IAII;IAHZ,GAAG,CAAU;IACb,IAAI,CAAS;IAEpB,YAAmB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QAC7B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;QACtC,IAAI,CAAC,GAAG,GAAG,OAAO,EAAE,CAAC;IACzB,CAAC;IAEM,UAAU;QACb,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC3B,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,YAAY;gBAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;YAExE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC,CAAC;YAE/C,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;YACvB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YACxD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;YAE7B,MAAM,eAAe,GAAG,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,0BAA0B,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;YAChH,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE,MAAM,EAAE,eAAe,EAAE,CAAC,CAAC,CAAC;YAC9D,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAEvC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC;YAE7C,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;YAE5C,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,kCAAkC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;IACP,CAAC;CACJ","names":[],"sourceRoot":"/","sources":["src/structures/api/Server.ts"],"sourcesContent":["import { KATClient as Client } from '../Client.js';\nimport express, { Express } from 'express';\nimport Sentry from '@sentry/node';\nimport helmet from 'helmet';\nimport bodyParser from 'body-parser';\nimport morgan from 'morgan';\nimport path, { dirname } from 'path';\nimport { fileURLToPath } from 'url';\nimport fs from 'fs';\n\n// ------------------------------------\nimport GlobalRoute from '@api/routes/index.js';\n// ------------------------------------\n\nconst __dirname = dirname(fileURLToPath(import.meta.url));\n\nexport class Server {\n    public app: Express;\n    public port: number;\n\n    constructor(public client: Client) {\n        this.port = client.config.server.port;\n        this.app = express();\n    }\n\n    public initialize(): Promise<void> {\n        return new Promise((resolve) => {\n            if (this.app.get('env') == 'production') this.app.set('trust proxy', 1);\n\n            this.app.use(Sentry.Handlers.requestHandler());\n\n            this.app.use(helmet());\n            this.app.use(bodyParser.urlencoded({ extended: true }));\n            this.app.use(express.json());\n\n            const accessLogStream = fs.createWriteStream(path.join(__dirname, '../../../logs/access.log'), { flags: 'a+' });\n            this.app.use(morgan('combined', { stream: accessLogStream }));\n            this.app.use(GlobalRoute(this.client));\n\n            this.app.use(Sentry.Handlers.errorHandler());\n\n            this.app.listen(this.port, () => resolve());\n\n            this.client.logger.status(`>>>> Server Initialized (Port: ${this.client.server.port})`);\n        });\n    }\n}\n"],"version":3}