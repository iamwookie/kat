{"debug_id":"e1e0fc85-6c73-564c-b18a-d574eff9af61","file":"Client.js","mappings":"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","names":[],"sourceRoot":"/","sources":["src/structures/Client.ts"],"sourcesContent":["import * as Config from '@config';\nimport { Client, ClientOptions, Events, PermissionsBitField, User } from 'discord.js';\nimport { Logger } from './Logger.js';\nimport { PrismaClient } from '@prisma/client';\nimport { Redis } from '@upstash/redis';\nimport { Commander } from './commander/Commander.js';\nimport { Dispatcher } from './music/Dispatcher.js';\nimport { Server } from '@structures/api/Server.js';\nimport { Cache } from './Cache.js';\n\nexport class KATClient extends Client {\n    public startTime: number;\n    // Make a type for config later\n    public config: typeof Config;\n    public prefix: string;\n    public permissions: { [key: string]: PermissionsBitField };\n    public logger: Logger;\n    public prisma: PrismaClient;\n    public redis: Redis;\n    public commander: Commander;\n    public dispatcher: Dispatcher;\n    public cache: Cache;\n    public server: Server;\n\n    constructor(options: ClientOptions) {\n        super(options);\n\n        this.startTime = Date.now();\n        this.config = Config;\n        this.prefix = Config.bot.prefix;\n        this.permissions = Config.bot.permissions;\n        this.logger = new Logger(this);\n        this.prisma = new PrismaClient({ log: ['warn', 'error'] });\n        this.redis = Redis.fromEnv();\n        this.commander = new Commander(this);\n        this.dispatcher = new Dispatcher(this);\n        this.cache = new Cache(this);\n        this.server = new Server(this);\n\n        // @ts-expect-error - Error method returns a string but isn't necessary.\n        this.on(Events.Error, (err) => this.logger.error(err, 'An Error Has Occured', 'Client'));\n\n        if (process.env.NODE_ENV != 'production') this.on(Events.Debug, (msg) => this.logger.debug(msg));\n    }\n\n    async initialize() {\n        try {\n            await this.prisma.$connect();\n            this.logger.status('>>>> Prisma Initialized!');\n        } catch (err) {\n            this.logger.fatal(err, 'Error Initializing', 'Prisma');\n        }\n\n        await this.commander.initialize();\n    }\n\n    isDev(user: User) {\n        return this.config.devs.includes(user.id);\n    }\n}\n"],"version":3}