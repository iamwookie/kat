{"debug_id":"49813a46-a5c7-5db2-9e50-1ece8d02e0a3","file":"Commander.js","mappings":"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","names":[],"sourceRoot":"/","sources":["src/structures/commander/Commander.ts"],"sourcesContent":["import { KATClient as Client } from '../Client.js';\nimport { Command } from './Command.js';\nimport { Module } from './Module.js';\nimport {\n    Events as DiscordEvents,\n    REST,\n    Routes,\n    ChatInputCommandInteraction,\n    Message,\n    Collection,\n    Snowflake,\n    PermissionFlagsBits,\n    MessagePayload,\n    MessageEditOptions,\n    InteractionEditReplyOptions,\n    MessageCreateOptions,\n    EmojiIdentifierResolvable,\n    User,\n    MessageReaction,\n} from 'discord.js';\nimport { ActionEmbed } from '@utils/embeds/index.js';\nimport { PermissionPrompts } from '@structures/interfaces/Enums.js';\n\n// -----------------------------------\nimport * as Commands from '@commands/index.js';\nimport * as Events from '@events/index.js';\nimport * as Modules from '@modules/index.js';\n// -----------------------------------\n\nconst commands = [\n    // Music\n    Commands.PlayCommand,\n    Commands.LoopCommand,\n    Commands.StopCommand,\n    Commands.PauseCommand,\n    Commands.SkipCommand,\n    Commands.QueueCommand,\n    Commands.VolumeCommand,\n    Commands.LyricsCommand,\n    // Misc\n    Commands.PrefixCommand,\n    Commands.HelpCommand,\n    Commands.StatsCommand,\n];\n\nexport class Commander {\n    private rest: REST;\n\n    public commands: Collection<string, Command>;\n    public global: Collection<string, Command>;\n    public reserved: Collection<Snowflake, Collection<string, Command>>;\n    public modules: Collection<string, Module>;\n    public aliases: Collection<string, string>;\n\n    constructor(public client: Client) {\n        this.rest = new REST({ version: '9' }).setToken(process.env.DISCORD_TOKEN);\n        this.commands = new Collection<string, Command>();\n        this.global = new Collection<string, Command>();\n        this.reserved = new Collection<Snowflake, Collection<string, Command>>();\n        this.modules = new Collection<string, Module>();\n        this.aliases = new Collection<string, string>();\n    }\n\n    async initialize() {\n        this.initializeModules();\n        this.initializeCommands();\n\n        if (process.argv.includes('--register')) {\n            this.client.logger.info('Registering Commands...', 'Commander');\n            await this.registerGlobalCommands();\n            await this.registerReservedCommands();\n            this.client.logger.info('Commands Registered!', 'Commander');\n        }\n\n        this.intiliazeEvents();\n\n        this.client.logger.status('>>>> Commander Initialized!');\n    }\n\n    authorize(interaction: ChatInputCommandInteraction | Message, command: Command): boolean {\n        const author = this.getAuthor(interaction);\n\n        if (interaction.inGuild()) {\n            if (command.module.guilds && !command.module.guilds.includes(interaction.guild!.id)) return false;\n            if (!interaction.channel?.permissionsFor(interaction.guild!.members.me!).has(PermissionFlagsBits.SendMessages)) {\n                if (!command.hidden)\n                    author\n                        .send({\n                            embeds: [new ActionEmbed('fail').setText(PermissionPrompts.CannotSend)],\n                        })\n                        .catch((err) => {\n                            this.client.logger.error(err, 'Error Sending Permissions Prompt', 'Commander');\n                        });\n                return false;\n            }\n        } else if (!command.allowDM) {\n            return false;\n        }\n\n        if (command.users && !command.users.includes(author.id)) {\n            if (!command.hidden)\n                this.reply(interaction, {\n                    embeds: [new ActionEmbed('fail').setText(PermissionPrompts.NotAllowed)],\n                }).catch((err) => {\n                    this.client.logger.error(err, 'Error Sending Permissions Prompt', 'Commander');\n                });\n            return false;\n        }\n\n        if (command.cooldown && command.cooldowns) {\n            if (command.cooldowns.has(author.id)) {\n                const cooldown = command.cooldowns.get(author.id)!;\n                const secondsLeft = (cooldown - Date.now()) / 1000;\n                this.reply(interaction, {\n                    embeds: [new ActionEmbed('fail').setText(`Please wait \\`${secondsLeft.toFixed(1)}\\` seconds before using that command again!`)],\n                }).catch((err) => {\n                    this.client.logger.error(err, 'Error Sending Cooldown Prompt', 'Commander');\n                });\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private initializeModules(): void {\n        const modules = Object.values(Modules);\n\n        for (const Module of modules) {\n            try {\n                const module = new Module(this.client, this);\n                this.modules.set(module.name, module);\n            } catch (err) {\n                this.client.logger.error(err, 'Error Initializing Module', 'Commander');\n            }\n        }\n\n        this.client.emit(DiscordEvents.Debug, `Commander >> Successfully Initialized ${modules.length} Module(s)`);\n    }\n\n    private initializeCommands(): void {\n        for (const Command of commands) {\n            try {\n                const command = new Command(this.client, this);\n\n                if (command.aliases) {\n                    for (const alias of command.aliases) {\n                        this.aliases.set(alias, command.name);\n                    }\n                }\n\n                if (command.users) command.users = command.users.concat(this.client.config.devs);\n                if (!this.modules.has(command.module.name)) this.modules.set(command.module.name, command.module);\n                command.module.commands.set(command.name, command);\n\n                // Remove reserved in the future and use modules directly for registering\n                if (command.module.guilds) {\n                    for (const guild of command.module.guilds) {\n                        const commands = this.reserved.get(guild) || new Collection();\n                        commands.set(command.name, command);\n                        this.reserved.set(guild, commands);\n                    }\n                } else {\n                    this.global.set(command.name, command);\n                }\n\n                this.commands.set(command.name, command);\n            } catch (err) {\n                this.client.logger.error(err, 'Error Initializing Global Command', 'Commander');\n            }\n        }\n\n        this.client.emit(DiscordEvents.Debug, `Commander >> Successfully Initialized ${commands.length} Command(s)`);\n    }\n\n    private intiliazeEvents(): void {\n        const events = Object.values(Events);\n\n        for (const Event of events) {\n            try {\n                const event = new Event(this.client, this);\n                this.client.on(event.name, event.execute.bind(event));\n            } catch (err) {\n                this.client.logger.error(err, 'Error Initializing Event', 'Commander');\n            }\n        }\n\n        this.client.emit(DiscordEvents.Debug, `Commander >> Successfully Initialized ${events.length} Event(s)`);\n    }\n\n    private async registerGlobalCommands(): Promise<void> {\n        try {\n            let body = [];\n\n            for (const command of this.global.values()) {\n                if (command.disabled || command.hidden) continue;\n                body.push(command.data().toJSON());\n            }\n\n            const res: any = await this.rest.put(Routes.applicationCommands(process.env.DISCORD_APP_ID), { body });\n            this.client.emit(DiscordEvents.Debug, `Commander >> Successfully Registered ${res.length} Global Command(s)`);\n        } catch (err) {\n            this.client.logger.error(err, 'Error Registering Global Slash Commands', 'Commander');\n        }\n    }\n\n    private async registerReservedCommands(): Promise<void> {\n        for (const [guildId, commands] of this.reserved) {\n            if (!this.client.guilds.cache.has(guildId)) continue;\n\n            let body = [];\n\n            for (const command of commands.values()) {\n                if (command.disabled || command.hidden) continue;\n                body.push(command.data().toJSON());\n            }\n\n            try {\n                const res: any = await this.rest.put(Routes.applicationGuildCommands(process.env.DISCORD_APP_ID, guildId), { body });\n                this.client.emit(DiscordEvents.Debug, `Commander >> Successfully Registered ${res.length} Guild Command(s) For Guild: ${guildId}`);\n            } catch (err) {\n                this.client.logger.error(err, `Error Registering Guild Slash Commands For Guild: ${guildId}`, 'Commander');\n            }\n        }\n\n        this.client.emit(DiscordEvents.Debug, 'Commander >> Successfully Registered All Guild Commands');\n    }\n\n    getAuthor(interaction: ChatInputCommandInteraction | Message): User {\n        if (interaction instanceof ChatInputCommandInteraction) {\n            return interaction.user;\n        } else if (interaction instanceof Message) {\n            return interaction.author;\n        } else {\n            throw new Error('Invalid interaction.');\n        }\n    }\n\n    getArgs(interaction: ChatInputCommandInteraction | Message): (string | undefined)[] {\n        if (interaction instanceof ChatInputCommandInteraction) {\n            return interaction.options.data.map((option) => (typeof option.value == 'string' ? option.value.split(/ +/) : option.options)).flat() as string[];\n        } else if (interaction instanceof Message) {\n            return interaction.content.split(/ +/).slice(1);\n        } else {\n            return [];\n        }\n    }\n\n    reply(\n        interaction: ChatInputCommandInteraction | Message,\n        content: string | MessagePayload | MessageCreateOptions | InteractionEditReplyOptions\n    ): Promise<Message> {\n        if (interaction instanceof ChatInputCommandInteraction) {\n            return interaction.replied\n                ? Promise.reject('Interaction already replied.')\n                : interaction.editReply(content as Exclude<typeof content, MessageCreateOptions>);\n        } else if (interaction instanceof Message) {\n            return interaction.channel.send(content as Exclude<typeof content, InteractionEditReplyOptions>);\n        } else {\n            return Promise.reject('Invalid interaction.');\n        }\n    }\n\n    edit(\n        interaction: ChatInputCommandInteraction | Message,\n        editable: Message,\n        content: string | MessagePayload | MessageEditOptions | InteractionEditReplyOptions\n    ): Promise<Message> {\n        if (interaction instanceof ChatInputCommandInteraction) {\n            return interaction.replied\n                ? Promise.reject('Interaction already replied.')\n                : interaction.editReply(content as Exclude<typeof content, MessageEditOptions>);\n        } else if (interaction instanceof Message) {\n            return editable.edit(content as Exclude<typeof content, InteractionEditReplyOptions>);\n        } else {\n            return Promise.reject('Invalid interaction.');\n        }\n    }\n\n    react(interaction: ChatInputCommandInteraction | Message, emoji: string | EmojiIdentifierResolvable): Promise<Message | MessageReaction> {\n        if (interaction instanceof ChatInputCommandInteraction) {\n            return interaction.replied\n                ? Promise.reject('Interaction already replied.')\n                : interaction.editReply({ content: emoji as Exclude<typeof emoji, EmojiIdentifierResolvable> });\n        } else if (interaction instanceof Message) {\n            return interaction.react(emoji);\n        } else {\n            return Promise.reject('Invalid interaction.');\n        }\n    }\n}\n"],"version":3}