{"debug_id":"78c83708-d286-5d69-8f2f-0c8f17d70c61","file":"Commander.js","mappings":"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","names":[],"sourceRoot":"/","sources":["src/structures/commander/Commander.ts"],"sourcesContent":["import { KATClient as Client } from '../Client.js';\nimport { Command as CommanderCommand } from './Command.js';\nimport { Module as CommanderModule } from './Module.js';\nimport { Events as DiscordEvents, REST, Routes, ChatInputCommandInteraction, Collection } from 'discord.js';\nimport { ActionEmbed } from '@utils/embeds/index.js';\nimport { PermissionPrompts } from '@structures/interfaces/Enums.js';\n\n// -----------------------------------\nimport * as Commands from '@commands/index.js';\nimport * as Events from '@events/index.js';\nimport * as Modules from '@modules/index.js';\n// -----------------------------------\n\nexport class Commander {\n    private rest: REST;\n\n    public commands: Collection<string, CommanderCommand>;\n    public modules: Collection<string, CommanderModule>;\n    public aliases: Collection<string, string>;\n\n    constructor(public client: Client) {\n        this.rest = new REST({ version: '9' }).setToken(process.env.DISCORD_TOKEN);\n        this.commands = new Collection<string, CommanderCommand>();\n        this.modules = new Collection<string, CommanderModule>();\n        // Remove when shifting to slash commands.\n        this.aliases = new Collection<string, string>();\n    }\n\n    public async initialize(): Promise<void> {\n        this.initializeModules();\n        this.initializeCommands();\n\n        if (process.argv.includes('--register')) {\n            this.client.logger.info('Registering Commands...', 'Commander');\n            await this.registerCommands();\n            this.client.logger.info('Commands Registered!', 'Commander');\n        }\n\n        this.intiliazeEvents();\n\n        this.client.logger.status('>>>> Commander Initialized!');\n    }\n\n    public validate(interaction: ChatInputCommandInteraction, command: CommanderCommand): boolean {\n        if (interaction.inGuild()) {\n            if (!interaction.inCachedGuild()) return false;\n            if (command.module.guilds && !command.module.guilds.includes(interaction.guild.id)) return false;\n            if (!interaction.channel || !interaction.channel.permissionsFor(interaction.guild.members.me!).has(this.client.permissions.text)) {\n                if (!command.hidden) {\n                    const embed = new ActionEmbed('fail').setTitle('Uh Oh!').setText(PermissionPrompts.NotEnough);\n                    interaction.editReply({ embeds: [embed] }).catch((err) => this.client.logger.error(err, 'Error Sending Permissions Reply', 'Commander'));\n                }\n\n                return false;\n            }\n        }\n\n        if (command.cooldown && command.cooldowns) {\n            if (command.cooldowns.has(interaction.user.id)) {\n                const cooldown = command.cooldowns.get(interaction.user.id)!;\n                const secondsLeft = (cooldown - Date.now()) / 1000;\n\n                interaction\n                    .editReply({\n                        embeds: [new ActionEmbed('fail').setText(`Please wait \\`${secondsLeft.toFixed(1)}\\` seconds before using that command again!`)],\n                    })\n                    .catch((err) => {\n                        this.client.logger.error(err, 'Error Sending Cooldown Prompt', 'Commander');\n                    });\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public authorize(interaction: ChatInputCommandInteraction, command: CommanderCommand): boolean {\n        if (command.users && !command.users.includes(interaction.user.id)) {\n            if (!command.hidden)\n                interaction.editReply({ embeds: [new ActionEmbed('fail').setText(PermissionPrompts.NotAllowed)] }).catch((err) => {\n                    this.client.logger.error(err, 'Error Sending Permissions Prompt', 'Commander');\n                });\n\n            return false;\n        }\n\n        return true;\n    }\n\n    private initializeModules(): void {\n        const modules = Object.values(Modules);\n\n        for (const Module of modules) {\n            try {\n                const module = new Module(this.client, this);\n                this.modules.set(module.name, module);\n            } catch (err) {\n                this.client.logger.error(err, 'Error Initializing Module', 'Commander');\n            }\n        }\n\n        this.client.emit(DiscordEvents.Debug, `Commander >> Successfully Initialized ${modules.length} Module(s)`);\n    }\n\n    private initializeCommands(): void {\n        const commands = Object.values(Commands);\n\n        for (const Command of commands) {\n            try {\n                const command = new Command(this.client, this);\n\n                if (command.aliases) for (const alias of command.aliases) this.aliases.set(alias, command.name);\n                if (command.users) command.users = command.users.concat(this.client.config.devs);\n                if (!this.modules.has(command.module.name)) this.modules.set(command.module.name, command.module);\n                command.module.commands.set(command.name, command);\n\n                this.commands.set(command.name, command);\n            } catch (err) {\n                this.client.logger.error(err, 'Error Initializing Global Command', 'Commander');\n            }\n        }\n\n        this.client.emit(DiscordEvents.Debug, `Commander >> Successfully Initialized ${commands.length} Command(s)`);\n    }\n\n    private intiliazeEvents(): void {\n        const events = Object.values(Events);\n\n        for (const Event of events) {\n            try {\n                const event = new Event(this.client, this);\n                this.client.on(event.name, event.execute.bind(event));\n            } catch (err) {\n                this.client.logger.error(err, 'Error Initializing Event', 'Commander');\n            }\n        }\n\n        this.client.emit(DiscordEvents.Debug, `Commander >> Successfully Initialized ${events.length} Event(s)`);\n    }\n\n    private async registerCommands(): Promise<void> {\n        try {\n            let body = [];\n\n            for (const command of this.commands.values()) {\n                if (command.disabled || command.hidden) continue;\n                body.push(command.data().toJSON());\n            }\n\n            const res: any = await this.rest.put(Routes.applicationCommands(process.env.DISCORD_APP_ID), { body });\n            this.client.emit(DiscordEvents.Debug, `Commander >> Successfully Registered ${res.length} Global Command(s)`);\n        } catch (err) {\n            this.client.logger.error(err, 'Error Registering Global Slash Commands', 'Commander');\n        }\n    }\n}\n"],"version":3}