{"debug_id":"b651ace8-fafb-5c54-9a81-6536bf0a4726","file":"Cache.js","mappings":"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","names":[],"sourceRoot":"/","sources":["src/structures/Cache.ts"],"sourcesContent":["import { KATClient as Client } from './Client';\nimport { Snowflake } from 'discord.js';\nimport { Guild, Music } from '@prisma/client';\n\nexport class Cache {\n    public guilds: GuildCache\n    public music: MusicCache;\n    public queue: QueueCache;\n\n    constructor(public client: Client) {\n        this.guilds = new GuildCache(client);\n        this.music = new MusicCache(client);\n        this.queue = new QueueCache(client);\n\n        this.client.logger.status('>>>> Cache Initialized!');\n    }\n}\n\nclass GuildCache {\n    public key: string;\n\n    constructor(private client: Client) {\n        this.key = 'kat:guilds'\n    }\n\n    async get(guildId: Snowflake): Promise<Guild | null> {\n        try {\n            const res = await this.client.redis.hget<Guild>(this.key, guildId);\n            if (res) return res;\n\n            const data = await this.client.prisma.guild.findUnique({ where: { guildId } });\n            if (data) {\n                await this.client.redis.hset(this.key, { guildId: data });\n                await this.client.redis.expire(this.key, this.client.config.cache.guildTimeout);\n            }\n\n            return data;\n        } catch (err) {\n            this.client.logger.error(err, 'Error Getting Guild Data', 'GuildCache');\n            return null;\n        }\n    }\n\n    async set(guildId: Snowflake, data: Guild): Promise<void> {\n        try {\n            await this.client.redis.hset(this.key, { [guildId]: data });\n            await this.client.redis.expire(this.key, this.client.config.cache.guildTimeout);\n        } catch (err) {\n            this.client.logger.error(err, 'Error Setting Music Data', 'MusicCache');\n        }\n    }\n\n    async prefix(guildId: Snowflake): Promise<string> {\n        const res = await this.get(guildId);\n        return res?.prefix ?? this.client.prefix;\n    }\n}\n\nclass MusicCache {\n    private key: string;\n\n    constructor(private client: Client) {\n        this.key = 'kat:music'\n    }\n\n    async get(guildId: Snowflake): Promise<Music | null> {\n        try {\n            const res = await this.client.redis.hget<Music>(this.key, guildId);\n            if (res) return res;\n\n            const data = await this.client.prisma.music.findUnique({ where: { guildId } });\n            if (data) {\n                await this.client.redis.hset(this.key, { [guildId]: data });\n                await this.client.redis.expire(this.key, this.client.config.cache.musicTimeout);\n            }\n\n            return data;\n        } catch (err) {\n            this.client.logger.error(err, 'Error Getting Music Data', 'MusicCache');\n            return null;\n        }\n    }\n\n    async set(guildId: Snowflake, data: Music): Promise<void> {\n        try {\n            await this.client.redis.hset(this.key, { [guildId]: data });\n            await this.client.redis.expire(this.key, this.client.config.cache.musicTimeout);\n        } catch (err) {\n            this.client.logger.error(err, 'Error Setting Music Data', 'MusicCache');\n        }\n    }\n}\n\nclass QueueCache {\n    private key;\n\n    constructor(private client: Client) {\n        this.key = 'kat:queue'\n    }\n\n    async count(guildId: Snowflake):  Promise<number> {\n        try {\n            const res = await this.client.redis.hget<number>(this.key + ':counts', guildId);\n            if (res) return res;\n\n            const data = await this.client.prisma.track.count({ where: { guildId } });\n            if (data) {\n                await this.client.redis.hset(this.key + ':counts', { [guildId]: data });\n                await this.client.redis.expire(this.key + ':counts', this.client.config.cache.queueTimeout);\n            }\n\n            return data;\n        } catch (err) {\n            this.client.logger.error(err, 'Error Getting Queue Count', 'QueueCache');\n            return 0;\n        }\n    }\n\n    async increment(guildId: Snowflake): Promise<void> {\n        try {\n            await this.client.redis.hincrby(this.key + ':counts', guildId, 1);\n            await this.client.redis.expire(this.key + ':counts', this.client.config.cache.queueTimeout);\n        } catch (err) {\n            this.client.logger.error(err, 'Error Incrementing Queue Count', 'QueueCache');\n        }\n    }\n}\n"],"version":3}