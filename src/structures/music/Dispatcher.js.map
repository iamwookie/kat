{"debug_id":"57c68985-7f15-5b4e-adef-7254f576330b","file":"Dispatcher.js","mappings":"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","names":[],"sourceRoot":"/","sources":["src/structures/music/Dispatcher.ts"],"sourcesContent":["import { KATClient as Client } from '../Client.js';\nimport { Shoukaku, Connectors, Node, Player, NodeOption } from 'shoukaku';\nimport { Subscription } from './Subscription.js';\nimport { Collection, Guild, TextBasedChannel, User, VoiceBasedChannel } from 'discord.js';\nimport { YouTubeTrack, SpotifyTrack } from './Track.js';\nimport { YouTubePlaylist, SpotifyPlaylist } from './Playlist.js';\nimport { NodeError, PlayerError, SearchError } from '../interfaces/Errors.js';\nimport { Events } from '../interfaces/Events.js';\n\ndeclare module 'shoukaku' {\n    interface LavalinkResponse {\n        exception: {\n            message: string;\n            severity: string;\n            cause: string;\n        };\n    }\n}\n\nexport class Dispatcher {\n    private nodes: NodeOption[];\n\n    public shoukaku: Shoukaku;\n    public subscriptions: Collection<string, Subscription>;\n\n    constructor(public client: Client) {\n        this.nodes = this.client.config.lavalink.nodes;\n\n        this.shoukaku = new Shoukaku(new Connectors.DiscordJS(this.client), this.nodes, {\n            reconnectTries: 10,\n            restTimeout: 5_000,\n            moveOnDisconnect: false,\n        });\n\n        this.subscriptions = new Collection<string, Subscription>();\n\n        this.shoukaku.on('error', (name, error) => this.client.emit(Events.NodeError, name, error));\n        this.shoukaku.on('ready', (name) => this.client.emit(Events.NodeReady, name));\n        this.shoukaku.on('reconnecting', (name, info, tries) => this.client.emit(Events.NodeReconnecting, name, info, tries));\n        this.shoukaku.on('disconnect', (name) => this.client.emit(Events.NodeDisconnect, name));\n        this.shoukaku.on('close', (name, code) => this.client.emit(Events.NodeClose, name, code));\n\n        this.client.logger.status('>>>> Dispatcher Initialized');\n    }\n\n    public async createSubscription(guild: Guild, voiceChannel: VoiceBasedChannel, textChannel: TextBasedChannel): Promise<Subscription> {\n        const exists = this.subscriptions.get(guild.id);\n        if (exists) return exists;\n\n        let node: Node | undefined;\n\n        try {\n            node = this.shoukaku.getNode();\n            if (!node) throw new NodeError('No nodes available.');\n        } catch (err) {\n            throw new NodeError((err as Error).message);\n        }\n\n        let player: Player;\n\n        try {\n            player = await node.joinChannel({\n                guildId: guild.id,\n                channelId: voiceChannel.id,\n                shardId: 0,\n                deaf: true,\n            });\n        } catch (err) {\n            throw new PlayerError((err as Error).message);\n        }\n\n        const subscription = new Subscription(this, guild, voiceChannel, textChannel, player, node);\n        subscription.position = await this.client.cache.queue.count(guild.id);\n\n        const res = await this.client.cache.music.get(guild.id);\n        if (res?.volume) subscription.volume = res.volume;\n\n        this.subscriptions.set(guild.id, subscription);\n        this.client.emit(Events.SubscriptionCreate, subscription);\n\n        return subscription;\n    }\n\n    public async search(query: string, requester: User): Promise<YouTubeTrack | SpotifyTrack | YouTubePlaylist | SpotifyPlaylist | null> {\n        let node: Node | undefined;\n\n        try {\n            node = this.shoukaku.getNode();\n            if (!node) throw new NodeError('No nodes available.');\n        } catch (err) {\n            throw new NodeError((err as Error).message);\n        }\n\n        let search: string | URL;\n\n        try {\n            search = new URL(query);\n        } catch {\n            search = query;\n        }\n\n        const res = await node.rest.resolve(search instanceof URL ? search.href : `ytsearch:${search}`);\n        if (!res) return null;\n\n        switch (res.loadType) {\n            case 'LOAD_FAILED':\n                throw new SearchError(1, res.exception.message);\n            case 'SEARCH_RESULT':\n                return new YouTubeTrack(res.tracks[0], requester);\n            case 'TRACK_LOADED': {\n                const data = res.tracks[0];\n                const source = data.info.sourceName;\n\n                switch (source) {\n                    case 'youtube':\n                        return new YouTubeTrack(data, requester);\n                    case 'spotify':\n                        return new SpotifyTrack(data, requester);\n                    default:\n                        return null;\n                }\n            }\n            case 'PLAYLIST_LOADED': {\n                if (!(search instanceof URL)) return null;\n\n                const info = res.playlistInfo;\n                const tracks = res.tracks;\n                const source = tracks[0].info.sourceName;\n\n                switch (source) {\n                    case 'youtube':\n                        return new YouTubePlaylist(search, info, requester, tracks);\n                    case 'spotify':\n                        return new SpotifyPlaylist(search, info, requester, tracks);\n                    default:\n                        return null;\n                }\n            }\n            default:\n                return null;\n        }\n    }\n\n    public getSubscription(guild: Guild | null): Subscription | undefined {\n        if (guild) return this.subscriptions.get(guild.id);\n    }\n}\n"],"version":3}