{"debug_id":"4ab178a6-634b-568a-97aa-fa706dc0b5bc","file":"music.js","mappings":";AAAA,OAAO,EAAE,YAAY,EAAQ,MAAM,YAAY,CAAC;AAEhD,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAE/C,MAAM,OAAO,UAAW,SAAQ,YAAY;IACpB;IAApB,YAAoB,YAA+B;QAC/C,KAAK,EAAE,CAAC;QADQ,iBAAY,GAAZ,YAAY,CAAmB;QAG/C,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACxB,KAAK,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACnE,CAAC;IAED,OAAO,CAAC,IAAU;QACd,OAAO,KAAK,CAAC,SAAS,CAAC;YACnB,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,uBAAuB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE;YACvF,OAAO,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,SAAS;SACzC,CAAC,CAAC;IACP,CAAC;IAED,UAAU,CAAC,IAAwC;QAC/C,IAAI,CAAC,IAAI;YAAE,OAAO,IAAI,CAAC;QAEvB,IAAI,IAAI,CAAC,SAAS;YAAE,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACvD,OAAO,KAAK,CAAC,SAAS,CAAC;YACnB,IAAI,EAAE,cAAc;YACpB,KAAK,EAAE,KAAK,IAAI,CAAC,YAAY,CAAC,QAAQ,SAAS,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,GAClF,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EACzC,GAAG,cAAc,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,QAAQ,QAAQ,IAAI,CAAC,GAAG,GAAG;SAChF,CAAC,CAAC;IACP,CAAC;IAED,QAAQ,CAAC,KAAsC;QAC3C,IAAI,CAAC,KAAK,CAAC,MAAM;YAAE,OAAO,IAAI,CAAC;QAE/B,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,KAAK,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,EAAE,EAAE;YAC1C,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG;gBAAE,OAAO,KAAK,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,GAAG,GAAG,OAAO,KAAK,CAAC,MAAM,GAAG,KAAK,YAAY,EAAE,CAAC,CAAC;YAC/H,GAAG,IAAI,KAAK,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,KAAK,GAAG,CAAC,SAAS,cAAc,CAAC,KAAK,CAAC,OAAO,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC,QAAQ,QACjH,KAAK,CAAC,GACV,KAAK,CAAC;SACT;QAED,OAAO,KAAK,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,GAAG,GAAG,EAAE,EAAE,CAAC,CAAC;IACvE,CAAC;CACJ","names":[],"sourceRoot":"/","sources":["src/utils/embeds/music.ts"],"sourcesContent":["import { EmbedBuilder, User } from 'discord.js';\nimport { Subscription as MusicSubscription, YouTubeTrack, SpotifyTrack, YouTubePlaylist, SpotifyPlaylist } from '@structures/index.js';\nimport { getServiceIcon } from '../helpers.js';\n\nexport class MusicEmbed extends EmbedBuilder {\n    constructor(private subscription: MusicSubscription) {\n        super();\n\n        super.setColor('White');\n        super.setFooter({ text: `🎵 ${this.subscription.node.name}` });\n    }\n\n    setUser(user: User) {\n        return super.setFooter({\n            text: `${user.tag.replace('#0', '')} \\u200b • \\u200b 🎵 ${this.subscription.node.name}`,\n            iconURL: user.avatarURL() ?? undefined,\n        });\n    }\n\n    setPlaying(item: YouTubeTrack | SpotifyTrack | null) {\n        if (!item) return this;\n\n        if (item.thumbnail) super.setThumbnail(item.thumbnail);\n        return super.addFields({\n            name: 'Now Playing:',\n            value: `\\`${this.subscription.position}.\\` - ${this.subscription.paused ? '⏸️ - ' : ''}${\n                this.subscription.looped ? '🔁 - ' : ''\n            }${getServiceIcon(item)} [\\`${item.title} [${item.duration}]\\`](${item.url})`,\n        });\n    }\n\n    setQueue(queue: (YouTubeTrack | SpotifyTrack)[]) {\n        if (!queue.length) return this;\n\n        let res = '';\n        for (const [index, track] of queue.entries()) {\n            if (res.length >= 840) return super.addFields({ name: 'Server Queue:', value: `${res}+ \\`${queue.length - index}\\` more...` });\n            res += `\\`${this.subscription.position + index + 1}.\\` - ${getServiceIcon(track)} [\\`${track.title} [${track.duration}]\\`](${\n                track.url\n            })\\n`;\n        }\n\n        return super.addFields({ name: 'Server Queue:', value: `${res}` });\n    }\n}\n"],"version":3}