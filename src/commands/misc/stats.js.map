{"debug_id":"cdce8611-5fd6-5d40-b520-d29b9e33c7b2","file":"stats.js","mappings":";AAAA,OAAO,EAAkC,OAAO,EAAE,MAAM,sBAAsB,CAAC;AAC/E,OAAO,EAAwC,YAAY,EAAE,MAAM,YAAY,CAAC;AAChF,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAEhE,MAAM,OAAO,YAAa,SAAQ,OAAO;IACrC,YAAY,MAAc,EAAE,SAAoB;QAC5C,KAAK,CAAC,MAAM,EAAE,SAAS,EAAE;YACrB,IAAI,EAAE,OAAO;YACb,MAAM,EAAE,MAAM;YACd,MAAM,EAAE,IAAI;YACZ,WAAW,EAAE;gBACT,OAAO,EAAE,sBAAsB;aAClC;YACD,OAAO,EAAE,IAAI;YACb,KAAK,EAAE,EAAE;YACT,MAAM,EAAE,IAAI;SACf,CAAC,CAAC;IACP,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,GAA0C;QACpD,MAAM,KAAK,GAAG,IAAI,YAAY,EAAE;aAC3B,QAAQ,CAAC,QAAQ,CAAC;aAClB,QAAQ,CAAC,YAAY,CAAC;aACtB,SAAS,CACN,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,EACpF,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,EACtE,EAAE,IAAI,EAAE,cAAc,EAAE,KAAK,EAAE,KAAK,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,EACnG,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,EAC/E;YACI,IAAI,EAAE,OAAO;YACb,KAAK,EAAE,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,IAAI;YAC/E,MAAM,EAAE,IAAI;SACf,EACD,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE;QAC7E,uDAAuD;QACvD,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,KAAK,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CACrG,CAAC;QAEN,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACvE,IAAI,YAAY;YAAE,KAAK,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,KAAK,YAAY,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;QAEhH,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IACnD,CAAC;CACJ","names":[],"sourceRoot":"/","sources":["src/commands/misc/stats.ts"],"sourcesContent":["import { KATClient as Client, Commander, Command } from '@structures/index.js';\nimport { ChatInputCommandInteraction, Message, EmbedBuilder } from 'discord.js';\nimport { formatBytes, formatDuration } from '@utils/helpers.js';\n\nexport class StatsCommand extends Command {\n    constructor(client: Client, commander: Commander) {\n        super(client, commander, {\n            name: 'stats',\n            module: 'Misc',\n            legacy: true,\n            description: {\n                content: 'Show app statistics.',\n            },\n            allowDM: true,\n            users: [],\n            hidden: true,\n        });\n    }\n\n    async execute(int: ChatInputCommandInteraction | Message) {\n        const embed = new EmbedBuilder()\n            .setColor('Yellow')\n            .setTitle('Statistics')\n            .addFields(\n                { name: 'Uptime', value: `\\`${formatDuration(this.client.uptime)}\\``, inline: true },\n                { name: 'WS Ping', value: `\\`${this.client.ws.ping}\\``, inline: true },\n                { name: 'Memory Usage', value: `\\`${formatBytes(process.memoryUsage().heapUsed)}\\``, inline: true },\n                { name: 'Guilds', value: `\\`${this.client.guilds.cache.size}\\``, inline: true },\n                {\n                    name: 'Users',\n                    value: `\\`${this.client.guilds.cache.reduce((a, b) => a + b.memberCount, 0)}\\``,\n                    inline: true,\n                },\n                { name: 'Version', value: `\\`${this.client.config.version}\\``, inline: true },\n                // Might use a flag for subscription size in the future\n                { name: 'Active Queues', value: `\\`${this.client.dispatcher.subscriptions.size}\\``, inline: true }\n            );\n\n        const subscription = this.client.dispatcher.getSubscription(int.guild);\n        if (subscription) embed.addFields({ name: 'Guild Node', value: `\\`${subscription.node.name}\\``, inline: true });\n\n        this.commander.reply(int, { embeds: [embed] });\n    }\n}\n"],"version":3}