{"debug_id":"90353ba3-b5e2-5383-9c24-92700c48e696","file":"prefix.js","mappings":"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","names":[],"sourceRoot":"/","sources":["src/commands/misc/prefix.ts"],"sourcesContent":["import { KATClient as Client, Commander, Command } from '@structures/index.js';\nimport { SlashCommandBuilder, ChatInputCommandInteraction, Message, PermissionFlagsBits } from 'discord.js';\nimport { ActionEmbed } from '@utils/embeds/action.js';\nimport { PermissionPrompts } from '@structures/interfaces/Enums.js';\n\nexport class PrefixCommand extends Command {\n    constructor(client: Client, commander: Commander) {\n        super(client, commander, {\n            name: 'prefix',\n            module: 'Misc',\n            legacy: true,\n            description: {\n                content: 'Set the chat prefix for your server. [Admin Only]',\n                format: '<prefix>',\n            },\n            cooldown: 5,\n        });\n    }\n\n    data() {\n        return new SlashCommandBuilder()\n            .setName(this.name)\n            .setDescription(this.description?.content!)\n            .setDMPermission(false)\n            .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)\n            .addStringOption((option) => option.setName('prefix').setRequired(true).setDescription('The prefix to set.'));\n    }\n\n    async execute(int: ChatInputCommandInteraction<'cached'> | Message<true>) {\n        const author = this.commander.getAuthor(int);\n\n        if (!this.client.isDev(author) && !int.member?.permissions.has(PermissionFlagsBits.Administrator))\n            return this.commander.reply(int, { embeds: [new ActionEmbed('fail').setText(PermissionPrompts.NotAllowed)] });\n\n        const args = this.commander.getArgs(int)[0] as string;\n        if (!args) {\n            const prefix = await this.client.cache.guilds.prefix(int.guild.id);\n            return this.commander.reply(int, {\n                embeds: [new ActionEmbed('success').setText(`The current chat prefix is \\`${prefix}\\`. To set a new one, use: \\`${this.usage(prefix)}\\`.`)],\n            });\n        }\n\n        const res = await this.client.prisma.guild.upsert({\n            where: {\n                guildId: int.guild!.id,\n            },\n            update: {\n                prefix: args,\n            },\n            create: {\n                guildId: int.guild!.id,\n                prefix: args,\n            },\n        });\n\n        this.client.cache.guilds.set(res.guildId, res);\n\n        if (res) {\n            this.commander.reply(int, { embeds: [new ActionEmbed('success').setText(`Successfully set the chat prefix to \\`${res.prefix}\\`!`)] });\n        } else {\n            this.commander.reply(int, { embeds: [new ActionEmbed('fail').setText('An error occured while setting the prefix!')] });\n        }\n    }\n}\n"],"version":3}