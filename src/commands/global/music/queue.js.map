{"debug_id":"99548e69-f025-524b-adaa-e0f105f87961","file":"queue.js","mappings":";AAAA,OAAO,EAAE,OAAO,EAAkC,YAAY,EAAE,MAAM,sBAAsB,CAAC;AAE7F,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AAEjE,MAAM,OAAO,YAAa,SAAQ,OAAO;IACrC,YAAY,MAAc,EAAE,SAAoB;QAC5C,KAAK,CAAC,MAAM,EAAE,SAAS,EAAE;YACrB,IAAI,EAAE,OAAO;YACb,MAAM,EAAE,OAAO;YACf,MAAM,EAAE,IAAI;YACZ,OAAO,EAAE,CAAC,GAAG,CAAC;YACd,WAAW,EAAE;gBACT,OAAO,EAAE,wBAAwB;aACpC;YACD,QAAQ,EAAE,CAAC;YACX,SAAS,EAAE,IAAI;SAClB,CAAC,CAAC;IACP,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,GAA0D;QACpE,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAE7C,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACvE,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC,YAAY,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC;YACrE,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,CAAC,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;QAE7G,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,CAAC,IAAI,UAAU,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IACvJ,CAAC;CACJ","names":[],"sourceRoot":"/","sources":["src/commands/global/music/queue.ts"],"sourcesContent":["import { Command, KATClient as Client, Commander, MusicPrompts } from '@structures/index.js';\nimport { ChatInputCommandInteraction, Message } from 'discord.js';\nimport { ActionEmbed, MusicEmbed } from '@utils/embeds/index.js';\n\nexport class QueueCommand extends Command {\n    constructor(client: Client, commander: Commander) {\n        super(client, commander, {\n            name: 'queue',\n            module: 'Music',\n            legacy: true,\n            aliases: ['q'],\n            description: {\n                content: 'View the server queue.',\n            },\n            cooldown: 5,\n            ephemeral: true,\n        });\n    }\n\n    async execute(int: ChatInputCommandInteraction<'cached'> | Message<true>) {\n        const author = this.commander.getAuthor(int);\n\n        const subscription = this.client.dispatcher.getSubscription(int.guild);\n        if (!subscription || (!subscription.active && !subscription.queue.length))\n            return this.commander.reply(int, { embeds: [new ActionEmbed('fail').setText(MusicPrompts.QueueEmpty)] });\n\n        this.commander.reply(int, { embeds: [new MusicEmbed(subscription).setUser(author).setPlaying(subscription.active).setQueue(subscription.queue)] });\n    }\n}\n"],"version":3}